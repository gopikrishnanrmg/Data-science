load("~/R project/World happiness report/backupsc2.RData")
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.,data = train.df,importance=TRUE)
result2<-predict(lm2,valid.df)
plot(valid.df$Happiness.Score,result2)
value<-(result2-valid.df$Happiness.Score)^2
sum(value)#13.89 after removing generosity discard
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
source('~/R project/World happiness report/script2.R')
lm1<-lm(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
lm1#linear regression
result1<-predict(lm1,valid.df)
result1
plot(valid.df$Happiness.Score,result1)
value<-(result1-valid.df$Happiness.Score)^2
sum(value)#19.14
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
lm2#randomforest
lm2$importance#which parameter influences the most
result2<-predict(lm2,valid.df)
result2
plot(valid.df$Happiness.Score,result2)
value<-(result2-valid.df$Happiness.Score)^2
sum(value)#17.52
lm3<-party::ctree(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
lm3#party
plot(lm3)
result3<-predict(lm3,train.df)
result3
plot(train.df$Happiness.Score,result3)
value<-(result3-train.df$Happiness.Score)^2
sum(value)#65.11
lm1<-lm(Happiness.Score~(Economy..GDP.per.Capita.)^3+(Family)^2+(Health..Life.Expectancy.)^3+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
result1<-predict(lm1,valid.df)
plot(valid.df$Happiness.Score,result1)
value<-(result1-valid.df$Happiness.Score)^2
sum(value)#19.14 no change
lm2<-randomForest::randomForest(Happiness.Score~(Economy..GDP.per.Capita.)^3+(Family)^2+(Health..Life.Expectancy.)^3+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,valid.df)
plot(valid.df$Happiness.Score,result2)
value<-(result2-valid.df$Happiness.Score)^2
sum(value)#18 #discard, made model worse earlier was 17
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
sum(value)#18 #discard, made model worse earlier was 17
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,test.df)
plot(test.df$Happiness.Score,result2)
value<-(result2-test.df$Happiness.Score)^2
sum(value)#6
source('~/R project/World happiness report/script2.R')
plot(valid.df$Happiness.Score,result2)
lm1<-lm(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
lm1#linear regression
result1<-predict(lm1,valid.df)
result1
plot(valid.df$Happiness.Score,result1)
value<-(result1-valid.df$Happiness.Score)^2
sum(value)#19.14
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
lm2#randomforest
lm2$importance#which parameter influences the most
result2<-predict(lm2,valid.df)
result2
plot(valid.df$Happiness.Score,result2)
value<-(result2-valid.df$Happiness.Score)^2
sum(value)#17.52
lm3<-party::ctree(Happiness.Score~(Economy..GDP.per.Capita.)^3+(Family)^2+(Health..Life.Expectancy.)^3+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
lm3#party
plot(lm3)
result3<-predict(lm3,train.df)
result3
plot(train.df$Happiness.Score,result3)
value<-(result3-train.df$Happiness.Score)^2
sum(value)#68.11
lm1<-lm(Happiness.Score~(Economy..GDP.per.Capita.)^3+(Family)^2+(Health..Life.Expectancy.)^3+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
result1<-predict(lm1,valid.df)
plot(valid.df$Happiness.Score,result1)
value<-(result1-valid.df$Happiness.Score)^2
sum(value)#19.14 no change
lm2<-randomForest::randomForest(Happiness.Score~(Economy..GDP.per.Capita.)^3+(Family)^2+(Health..Life.Expectancy.)^3+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
result2<-predict(lm2,valid.df)
plot(valid.df$Happiness.Score,result2)
value<-(result2-valid.df$Happiness.Score)^2
sum(value)#18 #discard, made model worse earlier was 17
lm3<-party::ctree(Happiness.Score~(Economy..GDP.per.Capita.)^3+(Family)^2+(Health..Life.Expectancy.)^3+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
result3<-predict(lm3,train.df)
plot(train.df$Happiness.Score,result3)
value<-(result3-train.df$Happiness.Score)^2
sum(value)#68.11 no change
#tuning model lm2 removing generosity
#lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df,importance=TRUE)
lm2<-randomForest::randomForest(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.,data = train.df,importance=TRUE)
result2<-predict(lm2,valid.df)
plot(valid.df$Happiness.Score,result2)
value<-(result2-valid.df$Happiness.Score)^2
sum(value)#13.89 after removing generosity discard
lm3<-party::ctree(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
lm3#party
plot(lm3)
result3<-predict(lm3,train.df)
result3
plot(train.df$Happiness.Score,result3)
value<-(result3-train.df$Happiness.Score)^2
sum(value)#65.11
lm1<-lm(Happiness.Score~Economy..GDP.per.Capita.+Family+Health..Life.Expectancy.+Freedom+Trust..Government.Corruption.+Generosity,data = train.df)
lm1#linear regression
result1<-predict(lm1,valid.df)
result1
plot(valid.df$Happiness.Score,result1)
value<-(result1-valid.df$Happiness.Score)^2
sum(value)#19.14
lm2$importance
?seq_len()
df<-[1,2,9,6,5,0]
df<-{1,2,9,6,5,0}
dfa<-[1,2,9,6,5,0]
dfa<-[1 2 9 6 5 0]
dfa<-["1","2","9","6","5","0]
dfa<-["1","2","9","6","5","0"]
df<-c(1,2,9,6,5,0)
?c
df1<-c(1:5,10.5,"next")
df2<-sample(df)
df2<-sample(df,size=4)
df2<-sample(df,repeat(FALSE))
df2<-sample(df,repeat(TRUE))
df3<-sample(df,repeat(TRUE))
df<-c(sample(1:7))
df<-c(sample(1:7))
df2<-c(sample(1:7,repeat(TRUE)))
df2<-c(sample(1:7,replace = (TRUE)))
df2<-c(sample(1:7,replace = (FALSE)))
df2<-c(sample(1:7,replace = (FALSE)))
df2<-c(sample(1:7,replace = (FALSE)))
df2<-c(sample(1:7,replace = (FALSE)))
df2<-c(sample(1:7,replace = (FALSE)))
df2<-c(sample(1:7,replace = (FALSE)))
df2<-c(sample(1:7,replace = (FALSE)))
df2<-c(sample(1:7,replace = (TRUE)))
df2<-c(sample(1:7,replace = (TRUE)))
df2<-c(sample(1:7,replace = (TRUE)))
samplesize = 0.60 * 5
samplesize = 0.60 * 100
?seq_len()
index = sample( seq_len (100 ), size = 60 )
index = sample(100, size = 60 )
index = sample(100, size = 60 )
index = sample(100, size = 60 )
index = sample(100, size = 60 )
summary(train.df)
train.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(train.df)
summary(train.df)
set.seed(123)
hist(train.df$medv
train.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(train.df)
summary(train.df)
set.seed(123)
hist(train.df$medv)
train.df<-read.csv("train.csv",stringsAsFactors = TRUE)
setwd("~/R project/Boston")
train.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(train.df)
summary(train.df)
set.seed(123)
hist(train.df$medv)
maxvalue<-apply(train.df, 2,max)
minvalue<-apply(train.df, 2,min)
dataframe<-as.data.frame(scale(train.df,center = minvalue,scale = maxvalue))
summary(train.df)
summary(dataframe)
library(neuralnet)
nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df)
value.df<-predict(nm,test.df)
nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df)
result.df<-predict(nm,test.df)
nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 3 , linear.output = T)
plot(nm)
nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
rm(nm)
nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
plot(nm)
nm1<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 3 , linear.output = T)
plot(nm1)
plot(nm)
?compute
result.df<-compute(nm1,test.df)
result.df<-compute(nm1,test.df[,c[2:13]])
nm1<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = c[2,4] , linear.output = T)
nm2<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = c[2,4] , linear.output = T)
nm2<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = c(4,2) , linear.output = T)
plot(nm2)
result.df<-compute(nm,test.df[,[,2:13])
result.df<-compute(nm,test.df[,2:13])
result.df<-compute(nm1,test.df[,2:13])
result.df<-compute(nm2,test.df[,2:13])
result.df<-compute(nm,test.df[,1:13])
?glm
rm(dataframe)
train.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(train.df)
summary(train.df)
set.seed(123)
hist(train.df$medv)
maxvalue<-apply(train.df, 2,max)
minvalue<-apply(train.df, 2,min)
dataframe<-as.data.frame(scale(train.df,center = minvalue,scale = maxvalue-minvalue))
library(neuralnet)
nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
nm1<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 3 , linear.output = T)
nm2<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = c(4,2) , linear.output = T)
plot(nm)
result.df
result.df<-compute(nm,test.df[,1:13])
result.df<-compute(nm,test.df[,1:13])
result.df
result.df$net.result
result.df<-compute(nm2,test.df[,1:13])
result.df$net.result
test.df$medv
?sample
data.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(data.df)
summary(data.df)
set.seed(123)
hist(data.df$medv)
maxvalue<-apply(data.df, 2,max)
minvalue<-apply(data.df, 2,min)
dataframe<-as.data.frame(scale(data.df,center = minvalue,scale = maxvalue-minvalue))
index.df<-sample(data.df,0.6*nrow(data.df))
?sample
index.df<-sample(1:nrow(data.df),0.6*nrow(data.df))
index.df<-sample(1:nrow(data.df),0.7*nrow(data.df))
train.df<-data.df[index,]
valid.df<-data.df[-index,]
index<-sample(1:nrow(data.df),0.7*nrow(data.df))
train.df<-data.df[index,]
valid.df<-data.df[-index,]
library(neuralnet)
nm2<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = c(4,2) , linear.output = T)
plot(nm)
result.df<-compute(nm2,valid.df[,1:13])
nm2<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = c(4,2) , linear.output = T)
plot(nm)
result.df<-compute(nm2,valid.df[,1:13])
result.df<-result.df$net.result*(max(valid.df$medv)-min(valid.df$medv)+min(valid.df$medv))
actualvalue<-valid.df$medv*(max(valid.df$medv)-min(valid.df$medv)+min(valid.df$medv))
result.df<-compute(nm2,valid.df[,1:13])
result.df<-result.df$net.result*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
actualvalue<-valid.df$medv*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
mse<-sum(result.df-actualvalue)^2/nrow(valid.df)
mse
mse<-sum((result.df-actualvalue)^2)/nrow(valid.df)
mse
plot(actualvalue,result.df)
names(train.df)
data.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(data.df)
summary(data.df)
set.seed(123)
hist(data.df$medv)
maxvalue<-apply(data.df, 2,max)
minvalue<-apply(data.df, 2,min)
dataframe<-as.data.frame(scale(data.df,center = minvalue,scale = maxvalue-minvalue))
index<-sample(1:nrow(data.df),0.7*nrow(data.df))
train.df<-data.df[index,]
valid.df<-data.df[-index,]
library(neuralnet)
#nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
#nm1<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 3 , linear.output = T)
n<-names(train.df)
f<-as.formula(paste(("medv~"),paste(n[!n%in%medv],collapse = "+")))
nm<-neuralnet(f,data=train.df,hidden = c(5,3) , linear.output = T)
plot(nm)
result.df<-compute(nm,valid.df[,1:13])
result.df<-result.df$net.result*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
actualvalue<-valid.df$medv*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
mse<-sum(result.df-actualvalue)^2/nrow(valid.df)
train.df
names(train.df)
data.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(data.df)
summary(data.df)
set.seed(123)
hist(data.df$medv)
maxvalue<-apply(data.df, 2,max)
minvalue<-apply(data.df, 2,min)
dataframe<-as.data.frame(scale(data.df,center = minvalue,scale = maxvalue-minvalue))
index<-sample(1:nrow(data.df),0.7*nrow(data.df))
train.df<-data.df[index,]
valid.df<-data.df[-index,]
library(neuralnet)
#nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
#nm1<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 3 , linear.output = T)
n<-names(train.df)
f<-as.formula(paste(("medv~"),paste(n[!n%in%medv],collapse = "+")))
f<-as.formula(paste("medv~",paste(n[!n%in%medv],collapse = "+")))
f<-as.formula(paste("medv~",paste(n[!n%in%medv],collapse = "+")))
f<-as.formula(paste("medv~",paste(n[!n %in% "medv"],collapse = " + ")))
nm<-neuralnet(f,data=train.df,hidden = c(5,3) , linear.output = T)
plot(nm)
result.df<-compute(nm,valid.df[,1:13])
result.df<-result.df$net.result*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
actualvalue<-valid.df$medv*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
mse<-sum(result.df-actualvalue)^2/nrow(valid.df)
mse
data.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(data.df)
summary(data.df)
set.seed(123)
hist(data.df$medv)
maxvalue<-apply(data.df, 2,max)
minvalue<-apply(data.df, 2,min)
dataframe<-as.data.frame(scale(data.df,center = minvalue,scale = maxvalue-minvalue))
index<-sample(1:nrow(data.df),0.7*nrow(data.df))
train.df<-data.df[index,]
valid.df<-data.df[-index,]
library(neuralnet)
#nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
#nm1<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 3 , linear.output = T)
n<-names(train.df)
f<-as.formula(paste("medv~",paste(n[!n %in% "medv"],collapse = " + ")))
nm<-neuralnet(f,data=train.df,hidden = c(5,3) , linear.output = T)
plot(nm)
result.df<-compute(nm,valid.df[,1:13])
result.df<-compute(nm,valid.df[,1:13])
data.df<-read.csv("train.csv",stringsAsFactors = TRUE)
test.df<-read.csv("test.csv",stringsAsFactors = TRUE)
is.null(data.df)
summary(data.df)
set.seed(123)
hist(data.df$medv)
maxvalue<-apply(data.df, 2,max)
minvalue<-apply(data.df, 2,min)
dataframe<-as.data.frame(scale(data.df,center = minvalue,scale = maxvalue-minvalue))
index<-sample(1:nrow(data.df),0.7*nrow(data.df))
train.df<-data.df[index,]
valid.df<-data.df[-index,]
library(neuralnet)
#nm<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 5 , linear.output = T)
#nm1<-neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,data=train.df,hidden = 3 , linear.output = T)
n<-names(train.df)
f<-as.formula(paste("medv~",paste(n[!n %in% "medv"],collapse = " + ")))
nm<-neuralnet(f,data=train.df,hidden = c(5,3) , linear.output = T)
plot(nm)
result.df<-compute(nm,valid.df[,1:13])
View(valid.df)
View(valid.df)
ncol(valid.df)
ncol(train.df)
f<-as.formula(paste("medv~",paste(n[!n %in% "medv" & "ID"],collapse = " + ")))
f<-as.formula(paste("medv~",paste(n[!n %in% "medv" & !n %in% "ID"],collapse = " + ")))
nm<-neuralnet(f,data=train.df,hidden = c(5,3) , linear.output = T)
result.df<-compute(nm,valid.df[,1:13])
result.df<-result.df$net.result*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
actualvalue<-valid.df$medv*(max(data.df$medv)-min(data.df$medv)+min(data.df$medv))
mse<-sum(result.df-actualvalue)^2/nrow(valid.df)
mse
View(result.df)
View(result.df)
install.packages("MASS")
setwd("~/R project/Neural networks")
library(MASS)
library(neuralnet)
set.seed(50)
data<-Boston
is.null(data)
summary(data)
minvalue<-apply(data,2,min)
maxvalue<-apply(data,2,max)
scaled<-as.data.frame(scale(data,center = minvalue,scale = maxvalue-minvalue))
index<-sample(a:nrow(data),0.7*nrow(data))
index<-sample(1:nrow(data),0.7*nrow(data))
train<-scaled[index,]
test<-scaled[-index,]
n<-names(scaled)
f<-as.formula(paste("medv~",paste(n[n! %in% "medv"],collapse= " + ")))
f<-as.formula(paste("medv~",paste(n[!n %in% "medv"],collapse= " + ")))
rm(nm)
nm<-neuralnet(f,data=train,hidden=c(3,5),linear.output=T)
predicted<-compute(nm,data=test)
View(test)
View(test)
predicted<-compute(nm,data=test[,1:13])
predicted<-compute(nm,test[,1:13])
final<-predicted$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test$medv<-test$medv*(max(data$medv)-min(data$medv))+min(data$medv)
mse<-(final-test-medv)^2/nrow(test)
mse
mse<-(final-test$medv)^2/nrow(test)
mse
